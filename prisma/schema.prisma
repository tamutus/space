// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_URL")
}

model Person {
  id          Int          @id @default(autoincrement())
  auth0sub    String       @unique
  email       String       @unique
  personNames PersonNames?
  // contracts   Contract[]
  desk        Desk?
}

model PersonNames {
  id         Int     @id @default(autoincrement())
  person     Person? @relation(fields: [personId], references: [id])
  personId   Int?    @unique
  chosenName String
  familyName String?
  legalName  String?
  pronoun    String?
}

model Desk {
  id       Int     @id @default(autoincrement())
  bio      String?
  person   Person  @relation(fields: [personId], references: [id])
  personId Int     @unique
  dropBox  String
}

model BlogPost {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  title     String        @db.VarChar(255)
  content   Json
  published Boolean       @default(false)
  tags      TagsOnPosts[]
}

model TagsOnPosts {
  post   BlogPost @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId Int
  tag    Tag      @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tagId  Int

  @@id([postId, tagId])
}

model Tag {
  id    Int           @id @default(autoincrement())
  name  String        @unique
  info  String?
  nsfw  Boolean       @default(false)
  art   TagsOnArt[]
  posts TagsOnPosts[]
}

model TagsOnArt {
  art   Art @relation(fields: [artId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  artId Int
  tag   Tag @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tagId Int

  @@id([artId, tagId])
}

model Art {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  bucket    String
  fileName  String
  title     String
  info      String?
  published Boolean     @default(false)
  tags      TagsOnArt[]
}

// model Contract {
//   id        Int            @id @default(autoincrement())
//   ordinal   Int            @unique
//   person    Person         @relation(fields: [personId], references: [id], onUpdate: Cascade, onDelete: Restrict)
//   personId  Int
//   website   Website?        @relation(fields: [websiteId], references: [id], onUpdate: Cascade, onDelete: SetNull)
//   websiteId Int?
//   status    ContractStatus @default(PENDING)
//   payments  Payment[]
//   charges   Charge[]
//   createdAt DateTime       @default(now())
//   updatedAt DateTime       @updatedAt
//   startDate DateTime?
//   endDate   DateTime?
//   info String?
// }

// enum ContractStatus {
//   PENDING
//   ACTIVE
//   ON_HOLD
//   COMPLETE
//   TERMINATED
//   CANCELLED
//   EXPIRED
// }

// model Payment {
//   id         Int      @id @default(autoincrement())
//   amount     Decimal  @db.Money
//   currency String
//   receiptGiven Boolean  @default(false)
//   contract   Contract @relation(fields: [contractId], references: [id])
//   contractId Int
//   paidAt DateTime
// }

// model Charge {
//   id           Int      @id @default(autoincrement())
//   units Int @default(1)
//   unitCost     Decimal  @db.Money
//   totalCost         Decimal  @db.Money
//   description  String
//   service Service @relation(fields: [serviceId], references: [id])
//   serviceId Int
//   contract     Contract @relation(fields: [contractId], references: [id])
//   contractId   Int
// }
// model Service {
//   id Int @id @default(autoincrement())
//   unitCost Decimal @db.Money
//   charges Charge[]
//   available Boolean @default(true)
//   stripeId String
// }
// model Website {
//   id        Int            @id @default(autoincrement())
//   name      String
//   url       String
//   createdAt DateTime       @default(now())
//   steps     WebsiteSteps[]
//   contracts Contract[]
//   contractId Int
// }

// model Step {
//   id          Int            @id @default(autoincrement())
//   name        String
//   description Json
//   websites    WebsiteSteps[]
// }

// model WebsiteSteps {
//   site      Website    @relation(fields: [siteId], references: [id], onUpdate: Cascade, onDelete: Cascade)
//   siteId    Int
//   step      Step       @relation(fields: [stepId], references: [id], onUpdate: Cascade, onDelete: Cascade)
//   stepId    Int
//   status    StepStatus
//   startedAt DateTime   @default(now())
//   finishedAt DateTime @default(now())
//   updatedAt DateTime   @updatedAt
//   hours Decimal @default(0.00)

//   @@id([siteId, stepId])
// }

// enum StepStatus {
//   PLANNED
//   DOING
//   STAGED
//   LIVE
// }
